import argparse
from collections import defaultdict
from typing import List, Dict, Tuple

from parse_canlog import CANFrame, parse_canlog

# Known OBD-II PID signal definitions: pid -> (name, length_bits, factor, offset, unit)
PID_SIGNALS: Dict[int, Tuple[str, int, float, float, str]] = {
    0x0C: ("EngineRPM", 16, 0.25, 0.0, "rpm"),
    0x0D: ("VehicleSpeed", 8, 1.0, 0.0, "km/h"),
    0x11: ("ThrottlePosition", 8, 100.0 / 255.0, 0.0, "%"),
    0x05: ("CoolantTemp", 8, 1.0, -40.0, "Â°C"),
}


def _format_float(val: float) -> str:
    """Format floats for DBC output without scientific notation."""
    return f"{val:.6f}".rstrip('0').rstrip('.')


def build_dbc(frames: List[CANFrame], output_path: str) -> None:
    """Generate a DBC file from parsed CAN frames."""
    frames_by_id: Dict[int, List[CANFrame]] = defaultdict(list)
    for f in frames:
        frames_by_id[f.can_id].append(f)

    with open(output_path, "w") as dbc:
        dbc.write('VERSION "generated by build_dbc"\n\n')
        dbc.write('NS_ :\n\n')
        dbc.write('BS_:\n\n')
        dbc.write('BU_: Vector__XXX\n\n')

        for can_id, msgs in sorted(frames_by_id.items()):
            dlc = max(f.dlc for f in msgs)
            dbc.write(f"BO_ {can_id} MSG_{can_id:03X}: {dlc} Vector__XXX\n")

            # Detect OBD-II responses
            pids = {f.data[1] for f in msgs if len(f.data) >= 2 and f.data[0] == 0x41}
            if pids:
                # service and PID bytes
                dbc.write(" SG_ Service : 0|8@1+ (1,0) [0|255] \"\" Vector__XXX\n")
                dbc.write(" SG_ PID M : 8|8@1+ (1,0) [0|255] \"\" Vector__XXX\n")
                for pid in sorted(pids):
                    if pid in PID_SIGNALS:
                        name, size, factor, offset, unit = PID_SIGNALS[pid]
                        start_bit = 16
                        max_raw = (1 << size) - 1
                        min_val = offset
                        max_val = max_raw * factor + offset
                        dbc.write(
                            f" SG_ {name} m{pid}: {start_bit}|{size}@1+ ({_format_float(factor)},{_format_float(offset)}) "
                            f"[{_format_float(min_val)}|{_format_float(max_val)}] \"{unit}\" Vector__XXX\n"
                        )
                    else:
                        dbc.write(
                            f" SG_ PID_{pid:02X} m{pid}: 16|8@1+ (1,0) [0|255] \"\" Vector__XXX\n"
                        )
            else:
                for i in range(dlc):
                    dbc.write(
                        f" SG_ BYTE{i} : {i*8}|8@1+ (1,0) [0|255] \"\" Vector__XXX\n"
                    )
            dbc.write("\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a DBC file from a CAN log CSV")
    parser.add_argument("log", help="Path to CAN log CSV")
    parser.add_argument("output", help="Output DBC file path")
    args = parser.parse_args()

    frames = parse_canlog(args.log)
    build_dbc(frames, args.output)
    print(f"Wrote DBC to {args.output}")
