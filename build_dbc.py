import argparse
import os
import re
from collections import defaultdict
from typing import Dict, List, Tuple

from parse_canlog import CANFrame, parse_canlog


# Known OBD-II PID signal definitions: pid -> (name, length_bits, factor, offset, unit)
PID_SIGNALS: Dict[int, Tuple[str, int, float, float, str]] = {
    0x0C: ("EngineRPM", 16, 0.25, 0.0, "rpm"),
    0x0D: ("VehicleSpeed", 8, 1.0, 0.0, "km/h"),
    0x11: ("ThrottlePosition", 8, 100.0 / 255.0, 0.0, "%"),
    0x05: ("CoolantTemp", 8, 1.0, -40.0, "째C"),
    0x04: ("EngineLoad", 8, 100.0 / 255.0, 0.0, "%"),
    0x0F: ("IntakeAirTemp", 8, 1.0, -40.0, "째C"),
    0x10: ("MAFAirFlow", 16, 0.01, 0.0, "g/s"),
    0x1F: ("RunTimeSinceStart", 16, 1.0, 0.0, "s"),
    0x2F: ("FuelLevel", 8, 100.0 / 255.0, 0.0, "%"),
    0x42: ("ControlModuleVoltage", 16, 0.001, 0.0, "V"),
    0x46: ("AmbientAirTemp", 8, 1.0, -40.0, "째C"),
    0x5C: ("EngineOilTemp", 8, 1.0, -40.0, "째C"),
}

# Known message names for specific CAN IDs
MESSAGE_NAMES: Dict[int, str] = {
    # Door unlock command observed during capture
    0x5F1: "DOOR_UNLOCK_CMD",
}


def _format_float(val: float) -> str:
    """Format floats for DBC output without scientific notation."""
    return f"{val:.6f}".rstrip("0").rstrip(".")


def build_dbc(frames: List[CANFrame], output_path: str) -> None:
    """Generate or update a DBC file from parsed CAN frames."""
    frames_by_id: Dict[int, List[CANFrame]] = defaultdict(list)
    for f in frames:
        frames_by_id[f.can_id].append(f)

    existing_ids = set()
    mode = "w"
    if os.path.exists(output_path):
        with open(output_path, "r") as dbc:
            for line in dbc:
                m = re.match(r"^BO_\s+(\d+)\s+", line)
                if m:
                    existing_ids.add(int(m.group(1)))
        mode = "a"

    with open(output_path, mode) as dbc:
        if mode == "w":
            dbc.write('VERSION "generated by build_dbc"\n\n')
            dbc.write('NS_ :\n\n')
            dbc.write('BS_:\n\n')
            dbc.write('BU_: Vector__XXX\n\n')
        else:
            dbc.write("\n")

        for can_id, msgs in sorted(frames_by_id.items()):
            if can_id in existing_ids:
                continue
            dlc = max(f.dlc for f in msgs)
            name = MESSAGE_NAMES.get(can_id, f"MSG_{can_id:03X}")
            dbc.write(f"BO_ {can_id} {name}: {dlc} Vector__XXX\n")

            # Detect OBD-II responses
            pids = {f.data[1] for f in msgs if len(f.data) >= 2 and f.data[0] == 0x41}
            if pids:
                dbc.write(" SG_ Service : 0|8@1+ (1,0) [0|255] \"\" Vector__XXX\n")
                dbc.write(" SG_ PID M : 8|8@1+ (1,0) [0|255] \"\" Vector__XXX\n")
                for pid in sorted(pids):
                    if pid in PID_SIGNALS:
                        name, size, factor, offset, unit = PID_SIGNALS[pid]
                        start_bit = 16
                        max_raw = (1 << size) - 1
                        min_val = offset
                        max_val = max_raw * factor + offset
                        dbc.write(
                            f" SG_ {name} m{pid}: {start_bit}|{size}@1+ ({_format_float(factor)},{_format_float(offset)}) "
                            f"[{_format_float(min_val)}|{_format_float(max_val)}] \"{unit}\" Vector__XXX\n"
                        )
                    else:
                        dbc.write(
                            f" SG_ PID_{pid:02X} m{pid}: 16|8@1+ (1,0) [0|255] \"\" Vector__XXX\n"
                        )
            else:
                for i in range(dlc):
                    dbc.write(
                        f" SG_ BYTE{i} : {i*8}|8@1+ (1,0) [0|255] \"\" Vector__XXX\n"
                    )
            dbc.write("\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a DBC file from a CAN log CSV")
    parser.add_argument("log", help="Path to CAN log CSV")
    parser.add_argument("output", help="Output DBC file path")
    args = parser.parse_args()

    frames = parse_canlog(args.log)
    build_dbc(frames, args.output)
    print(f"Wrote DBC to {args.output}")

